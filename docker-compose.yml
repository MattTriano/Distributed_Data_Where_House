x-airflow-common:
  &airflow-common
  build:
    context: ./
    dockerfile: ./Dockerfiles/airflow.Dockerfile
  env_file:
    - .env
  networks:
    - celery_net
  environment:
    &airflow-common-env
    _AIRFLOW_WWW_USER_USERNAME: airflow_www_user
    _AIRFLOW_WWW_USER_PASSWORD: airflow_www_password
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_password@airflow_db/airflow_metadata_db
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow_user:airflow_password@airflow_db/airflow_metadata_db
    AIRFLOW_CONN_DWH_DB_CONN: postgres://dwh_db_user:dwh_db_password@dwh_db:5432/dwh_db_name
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    GE_JUPYTER_CMD: "jupyter lab --allow-root --ip 0.0.0.0 --port 18888"
    POSTGRES_USER: airflow_user
    POSTGRES_PASSWORD: airflow_password
    POSTGRES_DB: airflow_metadata_db
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/data_raw:/opt/airflow/data_raw
    - ./airflow/dbt:/opt/airflow/dbt
    - ./airflow/great_expectations:/opt/airflow/great_expectations
    - ./profiles.yml:/home/airflow/.dbt/profiles.yml
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow_db:
      condition: service_healthy

x-superset-common:
  &superset-common
  build:
    context: ./
    dockerfile: Dockerfiles/superset.Dockerfile
  networks:
    - celery_net
  # env_file:
  #   - .env.superset
  environment:
    SUPERSET_LOAD_EXAMPLES: false
    ADMIN_EMAIL: superset_admin@email.com
    ADMIN_FIRST_NAME: superset_admin_firstname
    ADMIN_LAST_NAME: superset_admin_lastname
    ADMIN_PASSWORD: superset_admin_password
    ADMIN_USERNAME: superser_admin_username
    POSTGRES_DB: superset_db
    POSTGRES_USER: superset_db_user
    POSTGRES_PASSWORD: superset_db_password
    REDIS_HOST: redis
    REDIS_PORT: 6379
    # f"{DIALECT}://{USER}:{PASSWORD}@{HOST}:{PORT}/{DB}"
    SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://superset_db_user:superset_db_password@ss_db:5432/superset_db
    SECRET_KEY: my_superset_secret_key
  depends_on:
    &superset-common-depends-on
    redis:
      condition: service_healthy
    ss_db:
      condition: service_healthy

services:
  superset:
    <<: *superset-common
    image: adwh_superset:2.0.1
    command: [ "/app/docker/docker-bootstrap.sh", "app-gunicorn" ]
    restart: unless-stopped
    ports:
      - "8088:8088"
    depends_on:
      <<: *superset-common-depends-on
      ss_init:
        condition: service_completed_successfully
    volumes:
      - ss_core_celery_vol:/app/superset_home

  ss_db:
    image: adwh_ss_db:14.5
    build:
      context: ./
      dockerfile: Dockerfiles/airflow_db.Dockerfile
    # env_file:
    #   - .env.superset
    environment:
      POSTGRES_DB: superset_db
      POSTGRES_USER: superset_db_user
      POSTGRES_PASSWORD: superset_db_password
    networks:
      - celery_net
    ports:
      - "5442:5432"
    volumes:
      - ss_db_celery_vol:/var/lib/postgresql/data/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h ss_db -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  ss_init:
    <<: *superset-common
    command: [ "/app/docker/docker-init.sh" ]
    depends_on:
      - redis
      - ss_db
    volumes:
      - ss_core_celery_vol:/app/superset_home
    healthcheck:
      disable: true

  airflow_db:
    build:
      context: ./
      dockerfile: Dockerfiles/airflow_db.Dockerfile
    # env_file:
      # - .env
    environment:
      POSTGRES_USER: airflow_user
      POSTGRES_PASSWORD: airflow_password
      POSTGRES_DB: airflow_metadata_db
    volumes:
      - airflow_db_celery_vol:/var/lib/postgresql/data
    networks:
      - celery_net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h airflow_db -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  dwh_db:
    build:
      context: ./
      dockerfile: Dockerfiles/postgis.Dockerfile
    shm_size: 4gb
    # env_file:
    #   - .dwh.env
    environment:
      POSTGRES_DB: dwh_db_name
      POSTGRES_USER: dwh_db_user
      POSTGRES_PASSWORD: dwh_db_password
    ports:
      - "5431:5432"
    volumes:
      - adwh_db_celery_vol:/var/lib/postgresql/data/
    networks:
      - celery_net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h dwh_db -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  db_admin:
    build:
      context: ./
      dockerfile: ./Dockerfiles/pgadmin4.Dockerfile
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@email.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin_password
    restart: always
    depends_on:
      - dwh_db
    ports:
      - "5678:80"
    volumes:
      - pgadmin_celery_vol:/var/lib/pgadmin
    networks:
      - celery_net

  redis:
    build:
      context: ./
      dockerfile: Dockerfiles/redis.Dockerfile
    expose:
      - 6379
    volumes:
      - redis_celery_vol:/data
    networks:
      - celery_net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/data_raw /sources/dbt
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,data_raw,dbt}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./airflow:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

networks:
  celery_net:


volumes:
  airflow_db_celery_vol:
  adwh_db_celery_vol:
  pgadmin_celery_vol:
  ss_core_celery_vol:
  ss_db_celery_vol:
  redis_celery_vol:
